#--------Task 1----------------
V <- 200
U <- 5
R <- 2
rho_initial <- 20
theta_initial <- 0

#Maximum time late
tau_max <- (1/U)*(R*V/(pi*U)-R); tau_max

#Maximum Rho
rho_max <- tau_max*U+R; rho_max

#Tau
tau <- rho_initial/(U+R); tau

#Time Required to Trap
if (tau_max > tau) {
  print("A Trap is Possible")
  t_required <- (1/U)*(rho_max*log((rho_max-R)/(rho_max-rho_initial))-rho_initial+R)
} else
  print("A Trap is Not Possible")
t_required

#--------Task 2----------------

#Creating a spiral plot
# Input parameters
u <- U
v <- V
rho0 <- rho_initial
theta0 <- theta_initial
# Maximum trapping distance, and time when rho has decreased to R.
rhomax <- R*v/pi/u
tmax <- (1/u)*(rhomax*log((rhomax-R)/(rhomax-rho0))-rho0+R)
dt <- .1/60
# Equations of motion; i.e., the derivative of the state (rho, theta)
# as a function of the state.
drho <- function(rho) u - R*v/(pi*rho)
dtheta <- function(rho,drho) sqrt(v^2 - drho^2)/rho
# Initialize (rho, theta), time,  and output vectors
rho_out <- rho <- rho0
theta_out <- theta <- theta0
t <- 0
# Eulerâ€™s Method
while (t < tmax & rho > R) {
   rho_new <- rho + drho(rho) * dt
   theta_new <- theta + dtheta(rho,drho(rho)) * dt
   rho_out <- c(rho_out,rho_new)
   theta_out <- c(theta_out,theta_new)
   t <- t + dt
   rho <- rho_new
   theta <- theta_new
}
# Compute and plot x and y values
x <- rho_out*sin(theta_out)
y <- rho_out*cos(theta_out)
plot(x, y,type = "l", asp = 1, ,xlim=c(-30,30), ylim=c(-20,20)); grid()
text(0,6.5,paste("rhomax",round(rhomax,2)),cex=.8)
text(0,5.5,paste("tmax",round(tmax,3)),cex=.8)
